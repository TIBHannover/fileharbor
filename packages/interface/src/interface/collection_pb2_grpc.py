# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import collection_pb2 as collection__pb2

GRPC_GENERATED_VERSION = "1.67.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in collection_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class CollectionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add = channel.unary_unary(
            "/fileharbor.Collection/add",
            request_serializer=collection__pb2.CollectionAddRequest.SerializeToString,
            response_deserializer=collection__pb2.CollectionAddResponse.FromString,
            _registered_method=True,
        )
        self.delete = channel.unary_unary(
            "/fileharbor.Collection/delete",
            request_serializer=collection__pb2.CollectionDeleteRequest.SerializeToString,
            response_deserializer=collection__pb2.CollectionDeleteResponse.FromString,
            _registered_method=True,
        )
        self.list = channel.unary_unary(
            "/fileharbor.Collection/list",
            request_serializer=collection__pb2.CollectionListRequest.SerializeToString,
            response_deserializer=collection__pb2.CollectionListResponse.FromString,
            _registered_method=True,
        )
        self.query = channel.unary_unary(
            "/fileharbor.Collection/query",
            request_serializer=collection__pb2.QueryRequest.SerializeToString,
            response_deserializer=collection__pb2.QueryResponse.FromString,
            _registered_method=True,
        )


class CollectionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def add(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def query(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CollectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "add": grpc.unary_unary_rpc_method_handler(
            servicer.add,
            request_deserializer=collection__pb2.CollectionAddRequest.FromString,
            response_serializer=collection__pb2.CollectionAddResponse.SerializeToString,
        ),
        "delete": grpc.unary_unary_rpc_method_handler(
            servicer.delete,
            request_deserializer=collection__pb2.CollectionDeleteRequest.FromString,
            response_serializer=collection__pb2.CollectionDeleteResponse.SerializeToString,
        ),
        "list": grpc.unary_unary_rpc_method_handler(
            servicer.list,
            request_deserializer=collection__pb2.CollectionListRequest.FromString,
            response_serializer=collection__pb2.CollectionListResponse.SerializeToString,
        ),
        "query": grpc.unary_unary_rpc_method_handler(
            servicer.query,
            request_deserializer=collection__pb2.QueryRequest.FromString,
            response_serializer=collection__pb2.QueryResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "fileharbor.Collection", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("fileharbor.Collection", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Collection(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def add(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/fileharbor.Collection/add",
            collection__pb2.CollectionAddRequest.SerializeToString,
            collection__pb2.CollectionAddResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def delete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/fileharbor.Collection/delete",
            collection__pb2.CollectionDeleteRequest.SerializeToString,
            collection__pb2.CollectionDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def list(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/fileharbor.Collection/list",
            collection__pb2.CollectionListRequest.SerializeToString,
            collection__pb2.CollectionListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def query(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/fileharbor.Collection/query",
            collection__pb2.QueryRequest.SerializeToString,
            collection__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
