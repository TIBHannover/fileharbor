# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import analyser_pb2 as analyser__pb2

GRPC_GENERATED_VERSION = "1.67.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in analyser_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class IndexerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list_plugins = channel.unary_unary(
            "/iart.indexer.Indexer/list_plugins",
            request_serializer=analyser__pb2.ListPluginsRequest.SerializeToString,
            response_deserializer=analyser__pb2.ListPluginsReply.FromString,
            _registered_method=True,
        )
        self.status = channel.unary_unary(
            "/iart.indexer.Indexer/status",
            request_serializer=analyser__pb2.StatusRequest.SerializeToString,
            response_deserializer=analyser__pb2.StatusReply.FromString,
            _registered_method=True,
        )
        self.build_suggester = channel.unary_unary(
            "/iart.indexer.Indexer/build_suggester",
            request_serializer=analyser__pb2.SuggesterRequest.SerializeToString,
            response_deserializer=analyser__pb2.SuggesterReply.FromString,
            _registered_method=True,
        )
        self.search = channel.unary_unary(
            "/iart.indexer.Indexer/search",
            request_serializer=analyser__pb2.SearchRequest.SerializeToString,
            response_deserializer=analyser__pb2.SearchReply.FromString,
            _registered_method=True,
        )
        self.list_search_result = channel.unary_unary(
            "/iart.indexer.Indexer/list_search_result",
            request_serializer=analyser__pb2.ListSearchResultRequest.SerializeToString,
            response_deserializer=analyser__pb2.ListSearchResultReply.FromString,
            _registered_method=True,
        )
        self.analyse = channel.unary_unary(
            "/iart.indexer.Indexer/analyse",
            request_serializer=analyser__pb2.AnalyseRequest.SerializeToString,
            response_deserializer=analyser__pb2.AnalyseReply.FromString,
            _registered_method=True,
        )
        self.indexing = channel.stream_stream(
            "/iart.indexer.Indexer/indexing",
            request_serializer=analyser__pb2.IndexingRequest.SerializeToString,
            response_deserializer=analyser__pb2.IndexingReply.FromString,
            _registered_method=True,
        )
        self.index_create = channel.unary_unary(
            "/iart.indexer.Indexer/index_create",
            request_serializer=analyser__pb2.IndexCreateRequest.SerializeToString,
            response_deserializer=analyser__pb2.IndexCreateResponse.FromString,
            _registered_method=True,
        )
        self.dump = channel.unary_stream(
            "/iart.indexer.Indexer/dump",
            request_serializer=analyser__pb2.DumpRequest.SerializeToString,
            response_deserializer=analyser__pb2.DumpReply.FromString,
            _registered_method=True,
        )
        self.load = channel.stream_stream(
            "/iart.indexer.Indexer/load",
            request_serializer=analyser__pb2.LoadRequest.SerializeToString,
            response_deserializer=analyser__pb2.LoadReply.FromString,
            _registered_method=True,
        )
        self.get = channel.unary_unary(
            "/iart.indexer.Indexer/get",
            request_serializer=analyser__pb2.GetRequest.SerializeToString,
            response_deserializer=analyser__pb2.GetReply.FromString,
            _registered_method=True,
        )
        self.delete = channel.unary_unary(
            "/iart.indexer.Indexer/delete",
            request_serializer=analyser__pb2.DeleteRequest.SerializeToString,
            response_deserializer=analyser__pb2.DeleteReply.FromString,
            _registered_method=True,
        )


class IndexerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def list_plugins(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def build_suggester(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def list_search_result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def analyse(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def indexing(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def index_create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def dump(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def load(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def get(self, request, context):
        """entry services"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_IndexerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "list_plugins": grpc.unary_unary_rpc_method_handler(
            servicer.list_plugins,
            request_deserializer=analyser__pb2.ListPluginsRequest.FromString,
            response_serializer=analyser__pb2.ListPluginsReply.SerializeToString,
        ),
        "status": grpc.unary_unary_rpc_method_handler(
            servicer.status,
            request_deserializer=analyser__pb2.StatusRequest.FromString,
            response_serializer=analyser__pb2.StatusReply.SerializeToString,
        ),
        "build_suggester": grpc.unary_unary_rpc_method_handler(
            servicer.build_suggester,
            request_deserializer=analyser__pb2.SuggesterRequest.FromString,
            response_serializer=analyser__pb2.SuggesterReply.SerializeToString,
        ),
        "search": grpc.unary_unary_rpc_method_handler(
            servicer.search,
            request_deserializer=analyser__pb2.SearchRequest.FromString,
            response_serializer=analyser__pb2.SearchReply.SerializeToString,
        ),
        "list_search_result": grpc.unary_unary_rpc_method_handler(
            servicer.list_search_result,
            request_deserializer=analyser__pb2.ListSearchResultRequest.FromString,
            response_serializer=analyser__pb2.ListSearchResultReply.SerializeToString,
        ),
        "analyse": grpc.unary_unary_rpc_method_handler(
            servicer.analyse,
            request_deserializer=analyser__pb2.AnalyseRequest.FromString,
            response_serializer=analyser__pb2.AnalyseReply.SerializeToString,
        ),
        "indexing": grpc.stream_stream_rpc_method_handler(
            servicer.indexing,
            request_deserializer=analyser__pb2.IndexingRequest.FromString,
            response_serializer=analyser__pb2.IndexingReply.SerializeToString,
        ),
        "index_create": grpc.unary_unary_rpc_method_handler(
            servicer.index_create,
            request_deserializer=analyser__pb2.IndexCreateRequest.FromString,
            response_serializer=analyser__pb2.IndexCreateResponse.SerializeToString,
        ),
        "dump": grpc.unary_stream_rpc_method_handler(
            servicer.dump,
            request_deserializer=analyser__pb2.DumpRequest.FromString,
            response_serializer=analyser__pb2.DumpReply.SerializeToString,
        ),
        "load": grpc.stream_stream_rpc_method_handler(
            servicer.load,
            request_deserializer=analyser__pb2.LoadRequest.FromString,
            response_serializer=analyser__pb2.LoadReply.SerializeToString,
        ),
        "get": grpc.unary_unary_rpc_method_handler(
            servicer.get,
            request_deserializer=analyser__pb2.GetRequest.FromString,
            response_serializer=analyser__pb2.GetReply.SerializeToString,
        ),
        "delete": grpc.unary_unary_rpc_method_handler(
            servicer.delete,
            request_deserializer=analyser__pb2.DeleteRequest.FromString,
            response_serializer=analyser__pb2.DeleteReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "iart.indexer.Indexer", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("iart.indexer.Indexer", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Indexer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def list_plugins(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/iart.indexer.Indexer/list_plugins",
            analyser__pb2.ListPluginsRequest.SerializeToString,
            analyser__pb2.ListPluginsReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def status(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/iart.indexer.Indexer/status",
            analyser__pb2.StatusRequest.SerializeToString,
            analyser__pb2.StatusReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def build_suggester(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/iart.indexer.Indexer/build_suggester",
            analyser__pb2.SuggesterRequest.SerializeToString,
            analyser__pb2.SuggesterReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def search(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/iart.indexer.Indexer/search",
            analyser__pb2.SearchRequest.SerializeToString,
            analyser__pb2.SearchReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def list_search_result(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/iart.indexer.Indexer/list_search_result",
            analyser__pb2.ListSearchResultRequest.SerializeToString,
            analyser__pb2.ListSearchResultReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def analyse(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/iart.indexer.Indexer/analyse",
            analyser__pb2.AnalyseRequest.SerializeToString,
            analyser__pb2.AnalyseReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def indexing(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/iart.indexer.Indexer/indexing",
            analyser__pb2.IndexingRequest.SerializeToString,
            analyser__pb2.IndexingReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def index_create(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/iart.indexer.Indexer/index_create",
            analyser__pb2.IndexCreateRequest.SerializeToString,
            analyser__pb2.IndexCreateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def dump(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/iart.indexer.Indexer/dump",
            analyser__pb2.DumpRequest.SerializeToString,
            analyser__pb2.DumpReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def load(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/iart.indexer.Indexer/load",
            analyser__pb2.LoadRequest.SerializeToString,
            analyser__pb2.LoadReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def get(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/iart.indexer.Indexer/get",
            analyser__pb2.GetRequest.SerializeToString,
            analyser__pb2.GetReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def delete(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/iart.indexer.Indexer/delete",
            analyser__pb2.DeleteRequest.SerializeToString,
            analyser__pb2.DeleteReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
